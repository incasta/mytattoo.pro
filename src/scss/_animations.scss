@keyframes swipe-right {
    0% {
        transform: translate3d(0, 0, 0);
    }
    50% {
        transform: translate3d(100%, 0, 0);
    }
    75% {
        transform: translate3d(-100%, 0, 0);
        opacity: 0;
    }
    100% {
        transform: translate3d(0, 0, 0);
        opacity: 1;
    }
}

@mixin anim-swipe-right {
    animation: swipe-right .3s ease;
}

@keyframes swipe-v {
    0% {
        transform: translate3d(0, 0, 0) scale(1);
        opacity: 1;
    }
    33% {
        transform: translate3d(0, 200%, 0);
    }
    66% {
        transform: translate3d(0, -200%, 0);
        opacity: 0;
    }
    100% {
        transform: translate3d(0, 0, 0);
        opacity: 1;
    }
}

@keyframes home_h1 {
    0% {
        text-shadow: 2px 0 2px var(--palette-pink), -2px 0 1px var(--palette-blue);
    }

    4% {
        text-shadow: 0px 0 2px var(--palette-pink), 0px 0 1px var(--palette-blue);
    }

    7% {
        text-shadow: -4px 0 2px var(--palette-pink), 0px 0 1px var(--palette-blue);
    }

    10% {
        text-shadow: 2px 0 2px var(--palette-pink), -2px 0 1px var(--palette-blue);
    }
}

// глитч эффект hover для ссылок
@mixin glitchCopy { 
    content: attr(data-text);
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
}
@mixin glitchCopy2 { 
    content: attr(data-text);
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
}

.hover-effect-glitch {
    position: relative;
    color: white;
    // font-size: 4em;
    letter-spacing: .1em;

    /* Animation provies a slight random skew. Check bottom of doc
    for more information on how to random skew. */
    &:hover {
        animation: glitch-skew 1s infinite linear alternate-reverse;
    
        // Creates a copy before our text. 
        &::before{
            // Duplicates our text with the mixin.
            @include glitchCopy;
            // Scoots text slightly to the left for the color offset.
            left: 2px;
            // Creates the color 'shadow' that happens on the glitch.
            text-shadow: -2px 0 #ff00c1;
            /* Creates an initial clip for our glitch. This works in
            a typical top,right,bottom,left fashion and creates a mask
            to only show a certain part of the glitch at a time. */
            clip: rect(44px, 450px, 56px, 0);
            /* Runs our glitch-anim defined below to run in a 5s loop, infinitely,
            with an alternating animation to keep things fresh. */
            animation: glitch-anim 5s infinite linear alternate-reverse;
        }

        // Creates a copy after our text. Note comments from ::before.
        &::after {
            @include glitchCopy;
            left: -2px;
            text-shadow: -2px 0 #00fff9, 2px 2px #ff00c1;
            animation: glitch-anim2 1s infinite linear alternate-reverse;
        }
    }

    &.infinite {
        animation: glitch-skew2 1s infinite linear alternate-reverse;
    
        // Creates a copy before our text. 
        &::before{
            // Duplicates our text with the mixin.
            @include glitchCopy2;
            // Scoots text slightly to the left for the color offset.
            left: 2px;
            // Creates the color 'shadow' that happens on the glitch.
            text-shadow: -2px 0 #ff00c1;
            /* Creates an initial clip for our glitch. This works in
            a typical top,right,bottom,left fashion and creates a mask
            to only show a certain part of the glitch at a time. */
            clip: rect(44px, 450px, 56px, 0);
            /* Runs our glitch-anim defined below to run in a 5s loop, infinitely,
            with an alternating animation to keep things fresh. */
            animation: glitch-anim1_2 5s infinite linear alternate-reverse;
        }

        // Creates a copy after our text. Note comments from ::before.
        &::after {
            @include glitchCopy2;
            left: -2px;
            text-shadow: -2px 0 #00fff9, 2px 2px #ff00c1;
            animation: glitch-anim2_2 1s infinite linear alternate-reverse;
        }
    }
   
}

/* Creates an animation with 20 steaps. For each step, it calculates 
a percentage for the specific step. It then generates a random clip
box to be used for the random glitch effect. Also adds a very subtle
skew to change the 'thickness' of the glitch.*/
@keyframes glitch-anim {
    $steps: 20;
    @for $i from 0 through $steps {
        #{percentage($i*(1/$steps))} {
            clip: rect(random(100)+px, 9999px, random(100)+px, 0);
            // transform: skew((random(100) / 100) + deg);
        }
    }
}

// Same deal, just duplicated for ultra randomness.
@keyframes glitch-anim2 {
    $steps: 20;
    @for $i from 0 through $steps {
        #{percentage($i*(1/$steps))} {
            clip: rect(random(100)+px, 9999px, random(100)+px, 0);
            transform: skew((random(100) / 100) + deg);
        }
    }
}

// Does the same deal as before, but now only skews. Used for main text.
@keyframes glitch-skew {
    $steps: 10;
    @for $i from 0 through $steps {
        #{percentage($i*(1/$steps))} {
            transform: skew((random(10) - 5) + deg);
        }
    }

}



/* Creates an animation with 20 steaps. For each step, it calculates 
a percentage for the specific step. It then generates a random clip
box to be used for the random glitch effect. Also adds a very subtle
skew to change the 'thickness' of the glitch.*/
@keyframes glitch-anim1_2 {
    $steps: 20;
    @for $i from 0 through $steps {
        #{percentage($i*(1/$steps))} {
            clip: rect(random(100)+px, 9999px, random(100)+px, 0);
            // transform: skew((random(100) / 100) + deg);
        }
    }
}

// Same deal, just duplicated for ultra randomness.
@keyframes glitch-anim2_2 {
    $steps: 20;
    @for $i from 0 through $steps {
        #{percentage($i*(1/$steps))} {
            clip: rect(random(100)+px, 9999px, random(100)+px, 0);
            transform: skew((random(100) / 100) + deg);
        }
    }
}

// Does the same deal as before, but now only skews. Used for main text.
@keyframes glitch-skew2 {
    $steps: 10;
    @for $i from 0 through $steps {
        #{percentage($i*(1/$steps))} {
            transform: skew((random(10) - 5) + deg);
        }
    }

}


// эффект мерцания для главной фоновой картинки

.animation-flickering {
    animation: flickering 5s linear infinite;
    animation: flickering 8s linear infinite;
    transition: 0s;
    // background-color: rgba(39,39,39,.5);
    background-color: rgba(9, 10, 5, .5);
}

    
@keyframes flickering {
    // $steps: 10; 
    // @for $i from 0 through $steps {
    //     #{percentage($i*(1/$steps) / random(10))} {
    //         background-color: rgba(39, 39, 39, random(5) * .1);
    //     }
    // }

    0% {
        background-color: rgba(9, 10, 5, .5);
    }
    10% {
        background-color: rgba(9, 10, 5, .5);
    }
    20% {
        background-color: rgba(9, 10, 5, .5);
    }
    21% {
        background-color: rgba(9, 10, 5, .4);
    }
    22% {
        background-color: rgba(9, 10, 5, .5);
    }
    86% {
        background-color: rgba(9, 10, 5, .5);
    }
    88% {
        background-color: rgba(9, 10, 5, .4);
    }
    90% {
        background-color: rgba(9, 10, 5, .5);
    }
    92% {
        background-color: rgba(9, 10, 5, .4);
    }
    96% {
        background-color: rgba(9, 10, 5, .5);
    }
}

// Анимация при наведении на неоновые кнопки
.btn-neon.hover-effect-neon_glitch {
    &:hover {
        text-shadow: 0 0 1px var(--palette-blue);
        box-shadow: 0 0 1px var(--palette-pink-dark), 0 0 15px var(--palette-pink-dark) inset;
    }
}


@keyframes fadeIn {
    from {
        opacity: 0;
    }

    to {
        opacity: 1;
    }
}


@keyframes wizard {
    from {
        transform: translateX(100%);
    }
    to {
        transform: translateX(0%);
    }
}


@keyframes scroll {
    0% { opacity: 0; }
    10% { transform: translateY(0); opacity: 1; }
    100% { transform: translateY(15px); opacity: 0;}
}